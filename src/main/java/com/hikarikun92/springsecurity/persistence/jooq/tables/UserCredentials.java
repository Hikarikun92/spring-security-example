/*
 * This file is generated by jOOQ.
 */
package com.hikarikun92.springsecurity.persistence.jooq.tables;


import com.hikarikun92.springsecurity.persistence.jooq.DefaultSchema;
import com.hikarikun92.springsecurity.persistence.jooq.Indexes;
import com.hikarikun92.springsecurity.persistence.jooq.tables.records.UserCredentialsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserCredentials extends TableImpl<UserCredentialsRecord> {

    private static final long serialVersionUID = 856611848;

    /**
     * The reference instance of <code>user_credentials</code>
     */
    public static final UserCredentials USER_CREDENTIALS = new UserCredentials();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserCredentialsRecord> getRecordType() {
        return UserCredentialsRecord.class;
    }

    /**
     * The column <code>user_credentials.user_id</code>.
     */
    public final TableField<UserCredentialsRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>user_credentials.password</code>.
     */
    public final TableField<UserCredentialsRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>user_credentials</code> table reference
     */
    public UserCredentials() {
        this(DSL.name("user_credentials"), null);
    }

    /**
     * Create an aliased <code>user_credentials</code> table reference
     */
    public UserCredentials(String alias) {
        this(DSL.name(alias), USER_CREDENTIALS);
    }

    /**
     * Create an aliased <code>user_credentials</code> table reference
     */
    public UserCredentials(Name alias) {
        this(alias, USER_CREDENTIALS);
    }

    private UserCredentials(Name alias, Table<UserCredentialsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserCredentials(Name alias, Table<UserCredentialsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_CREDENTIALS_PKEY);
    }

    @Override
    public UniqueKey<UserCredentialsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(com.hikarikun92.springsecurity.persistence.jooq.tables.UserCredentials.USER_CREDENTIALS, "user_credentials_pkey", com.hikarikun92.springsecurity.persistence.jooq.tables.UserCredentials.USER_CREDENTIALS.USER_ID);
    }

    @Override
    public List<UniqueKey<UserCredentialsRecord>> getKeys() {
        return Arrays.<UniqueKey<UserCredentialsRecord>>asList(
              Internal.createUniqueKey(com.hikarikun92.springsecurity.persistence.jooq.tables.UserCredentials.USER_CREDENTIALS, "user_credentials_pkey", com.hikarikun92.springsecurity.persistence.jooq.tables.UserCredentials.USER_CREDENTIALS.USER_ID)
        );
    }

    @Override
    public UserCredentials as(String alias) {
        return new UserCredentials(DSL.name(alias), this);
    }

    @Override
    public UserCredentials as(Name alias) {
        return new UserCredentials(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserCredentials rename(String name) {
        return new UserCredentials(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserCredentials rename(Name name) {
        return new UserCredentials(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
